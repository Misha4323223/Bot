#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FutureChat Web Advanced - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ–±-–≤–µ—Ä—Å–∏—è AI –ß–∞—Ç-–±–æ—Ç–∞ —Å ChatterBot
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ChatterBot —Å —É–¥–æ–±–Ω—ã–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

from flask import Flask, render_template_string, request, jsonify
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer, ListTrainer
import json
import os
import random
import re
from datetime import datetime

app = Flask(__name__)

class WebAdvancedFutureChat:
    def __init__(self):
        self.name = "FutureChat Web Advanced"
        self.version = "3.5"
        self.fallback_knowledge = {}
        self.conversation_history = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChatterBot
        self.initialize_chatbot()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π
        self.load_fallback_knowledge()
        self.init_fallback_knowledge()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Å–∏–≤–Ω–æ–π —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–æ–π –±–∞–∑—ã
        self.load_encyclopedia_knowledge()
        
    def initialize_chatbot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChatterBot —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChatterBot...")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            self.chatbot = ChatBot(
                'FutureChat Advanced',
                storage_adapter='chatterbot.storage.SQLStorageAdapter',
                database_uri='sqlite:///web_advanced_chatbot.sqlite3',
                logic_adapters=[
                    'chatterbot.logic.BestMatch',
                    'chatterbot.logic.TimeLogicAdapter'
                ]
            )
            
            print("üéì –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è...")
            # –û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
            self.train_chatbot()
            self.chatbot_available = True
            print("‚úÖ ChatterBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChatterBot: {e}")
            print(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {str(e)}")
            self.chatbot = None
            self.chatbot_available = False
    
    def train_chatbot(self):
        """–û–±—É—á–µ–Ω–∏–µ ChatterBot"""
        try:
            # –¢—Ä–µ–Ω–µ—Ä—ã
            if not self.chatbot:
                return
            list_trainer = ListTrainer(self.chatbot)
            
            # –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            russian_conversations = [
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                "–ü—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –±–æ—Ç —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º! ü§ñ",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ –¥–µ–ª–∞? –Ø –≥–æ—Ç–æ–≤ –∫ —É–º–Ω–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É! ‚ú®",
                "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–°–ø–∞—Å–∏–±–æ! –Ø —Ä–∞–¥ –±—ã—Ç—å –∑–¥–µ—Å—å –∏ –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π! üéâ",
                
                # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", "–ú–µ–Ω—è –∑–æ–≤—É—Ç FutureChat Advanced. –Ø —É–º–Ω—ã–π AI –±–æ—Ç —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º.",
                "–ö—Ç–æ —Ç—ã?", "–Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI —á–∞—Ç-–±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.",
                "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è", "–ü—Ä–∏–≤–µ—Ç! –Ø FutureChat Advanced - —É–º–Ω—ã–π AI –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.",
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", "–Ø –º–æ–≥—É —É–º–Ω–æ –±–µ—Å–µ–¥–æ–≤–∞—Ç—å, —É—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö, —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É, –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
                "–¢–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏?", "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∏–∞–ª–æ–≥–∞—Ö.",
                "–ù–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω?", "–Ø –∏—Å–ø–æ–ª—å–∑—É—é –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!",
                
                # –ö–∞–∫ –¥–µ–ª–∞
                "–ö–∞–∫ –¥–µ–ª–∞?", "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ú–æ–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å! üß†",
                "–ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ö–∞–∂–¥—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —É–º–Ω–µ–µ!",
                "–ö–∞–∫ –∂–∏–∑–Ω—å?", "–ñ–∏–∑–Ω—å AI –±–æ—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å –Ω–æ–≤–æ–º—É!",
                
                # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
                "–°–ø–∞—Å–∏–±–æ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏! üòä",
                "–ë–ª–∞–≥–æ–¥–∞—Ä—é", "–ù–µ –∑–∞ —á—Ç–æ! –Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º!",
                
                # –ü—Ä–æ—â–∞–Ω–∏–µ
                "–ü–æ–∫–∞", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üëã",
                "–î–æ –≤—Å—Ç—Ä–µ—á–∏", "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ó–∞—Ö–æ–¥–∏ –µ—â–µ - —è –±—É–¥—É –µ—â–µ —É–º–Ω–µ–µ! üöÄ",
                "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ", "–ò —Ç–µ–±–µ –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ú®",
                
                # AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?", "–ò–ò - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –º–∞—à–∏–Ω–∞–º –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?", "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Å –æ–ø—ã—Ç–æ–º.",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏?", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ - —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º–æ–∑–≥–∞.",
                
                # –û–±—É—á–µ–Ω–∏–µ
                "–ö–∞–∫ —Ç—ã —É—á–∏—à—å—Å—è?", "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥, –∑–∞–ø–æ–º–∏–Ω–∞—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è –∏ —É–ª—É—á—à–∞—é —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞.",
                "–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —É–º–Ω–µ–µ?", "–î–∞! –ö–∞–∂–¥—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –º–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                
                # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
                "–ß—Ç–æ —Ç–∞–∫–æ–µ Python?", "Python - –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–ª—è AI, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö!",
                "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞!",
                
                # –ü–æ–º–æ—â—å
                "–ü–æ–º–æ–≥–∏ –º–Ω–µ", "–ö–æ–Ω–µ—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏, —Å —á–µ–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ!",
                "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å", "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            ]
            
            # –û–±—É—á–µ–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º
            for i in range(0, len(russian_conversations), 2):
                if i + 1 < len(russian_conversations):
                    list_trainer.train([
                        russian_conversations[i],
                        russian_conversations[i + 1]
                    ])
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–æ—Ä–ø—É—Å–µ
            try:
                if not self.chatbot:
                    return
                corpus_trainer = ChatterBotCorpusTrainer(self.chatbot)
                print("üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–æ—Ä–ø—É—Å–µ...")
                corpus_trainer.train("chatterbot.corpus.english.greetings")
                corpus_trainer.train("chatterbot.corpus.english.conversations")
                print("‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            except Exception as e:
                print(f"‚ö†Ô∏è –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–æ—Ä–ø—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
    
    def load_fallback_knowledge(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            if os.path.exists('web_advanced_knowledge.json'):
                with open('web_advanced_knowledge.json', 'r', encoding='utf-8') as f:
                    self.fallback_knowledge = json.load(f)
            else:
                self.fallback_knowledge = {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞–Ω–∏–π: {e}")
            self.fallback_knowledge = {}
    
    def save_fallback_knowledge(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            with open('web_advanced_knowledge.json', 'w', encoding='utf-8') as f:
                json.dump(self.fallback_knowledge, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
    
    def init_fallback_knowledge(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π"""
        default_knowledge = {
            "–≤—Ä–µ–º—è|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏|–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å": [
                f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}! ‚è∞",
                f"–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')} üïê"
            ],
            "–¥–∞—Ç–∞|–∫–∞–∫–æ–µ —á–∏—Å–ª–æ|—Å–µ–≥–æ–¥–Ω—è|–∫–∞–∫–æ–π –¥–µ–Ω—å": [
                f"–°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')} üìÖ",
                f"–î–∞—Ç–∞: {datetime.now().strftime('%d %B %Y')} üóìÔ∏è"
            ],
            "–≤–µ—Ä—Å–∏—è|–∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è": [
                f"–Ø FutureChat Web Advanced –≤–µ—Ä—Å–∏—è {self.version} —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º! ü§ñ"
            ]
        }
        
        for topic, responses in default_knowledge.items():
            if topic not in self.fallback_knowledge:
                self.fallback_knowledge[topic] = responses
    
    def get_chatbot_response(self, user_input):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatterBot"""
        if not self.chatbot_available:
            return None, 0
        
        try:
            if not self.chatbot:
                return None, 0
            response = self.chatbot.get_response(user_input)
            confidence = response.confidence
            return str(response), confidence
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ ChatterBot: {e}")
            return None, 0
    
    def get_fallback_response(self, user_input):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        math_result = self.solve_math_expression(user_input)
        if math_result:
            return math_result, 0.95
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        self.update_time_responses()
        
        normalized_input = re.sub(r'[^\w\s]', '', user_input.lower()).strip()
        
        for pattern, responses in self.fallback_knowledge.items():
            variants = [v.strip().lower() for v in pattern.split('|')]
            
            for variant in variants:
                if variant in normalized_input or normalized_input in variant:
                    return random.choice(responses), 0.9
        
        return None, 0
    
    def solve_math_expression(self, user_input):
        """–†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ –≤ ChatGPT"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        math_patterns = [
            r'(\d+(?:\.\d+)?)\s*[\+\-\*\/√ó√∑]\s*(\d+(?:\.\d+)?)',
            r'—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç\s+(.+)',
            r'–≤—ã—á–∏—Å–ª–∏\s+(.+)',
            r'—Ä–µ—à–∏\s+(.+)',
            r'–ø–æ—Å—á–∏—Ç–∞–π\s+(.+)'
        ]
        
        expression = None
        for pattern in math_patterns:
            match = re.search(pattern, user_input, re.IGNORECASE)
            if match:
                expression = match.group(1) if len(match.groups()) == 1 else user_input
                break
        
        if not expression:
            return None
        
        try:
            # –û—á–∏—â–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            expression = expression.replace('√ó', '*').replace('√∑', '/')
            expression = expression.replace('x', '*').replace(':', '/')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
            words_to_remove = ['—Å–∫–æ–ª—å–∫–æ', '–±—É–¥–µ—Ç', '—Ä–∞–≤–Ω–æ', '–ø–ª—é—Å', '–º–∏–Ω—É—Å', '—É–º–Ω–æ–∂–∏—Ç—å', '–Ω–∞', '—Ä–∞–∑–¥–µ–ª–∏—Ç—å']
            for word in words_to_remove:
                expression = expression.replace(word, '')
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–µ—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            expression = expression.replace('–ø–ª—é—Å', '+').replace('–º–∏–Ω—É—Å', '-')
            expression = expression.replace('—É–º–Ω–æ–∂–∏—Ç—å –Ω–∞', '*').replace('—Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞', '/')
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            expression = re.sub(r'[^\d\+\-\*\/\.\(\)]', '', expression)
            
            if not expression:
                return None
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ
            result = eval(expression)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –≤ ChatGPT
            responses = [
                f"üî¢ {expression} = **{result}**\n\n–í—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç–æ—á–Ω–æ! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –¥—Ä—É–≥–∏–º–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏?",
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result}**\n\n‚ú® –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —ç—Ç–æ –∫—Ä–∞—Å–∏–≤–æ! –í—ã—Ä–∞–∂–µ–Ω–∏–µ {expression} —Ä–∞–≤–Ω–æ {result}.",
                f"üßÆ {expression} = **{result}**\n\nüí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –•–æ—á–µ—à—å —Ä–µ—à–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ?",
                f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç: **{result}**\n\nüéØ {expression} = {result}. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –º–æ—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞!"
            ]
            
            return random.choice(responses)
            
        except:
            return None
    
    def update_time_responses(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        time_patterns = [
            "–≤—Ä–µ–º—è|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏|–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å",
            "–¥–∞—Ç–∞|–∫–∞–∫–æ–µ —á–∏—Å–ª–æ|—Å–µ–≥–æ–¥–Ω—è|–∫–∞–∫–æ–π –¥–µ–Ω—å"
        ]
        
        for pattern in time_patterns:
            if pattern in self.fallback_knowledge:
                if "–≤—Ä–µ–º—è" in pattern:
                    self.fallback_knowledge[pattern] = [
                        f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}! ‚è∞",
                        f"–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')} üïê"
                    ]
                elif "–¥–∞—Ç–∞" in pattern:
                    self.fallback_knowledge[pattern] = [
                        f"–°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')} üìÖ",
                        f"–î–∞—Ç–∞: {datetime.now().strftime('%d %B %Y')} üóìÔ∏è"
                    ]
    
    def generate_smart_response(self, user_input):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"""
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        intent = self.analyze_user_intent(user_input)
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        context_response = self.analyze_conversation_context(user_input)
        if context_response:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã ChatGPT –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
            enhanced_context = self.apply_chatgpt_response_templates(
                context_response, user_input, intent, 'high'
            )
            return self.save_to_history(user_input, enhanced_context, f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ({intent})")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        chatbot_response, chatbot_confidence = self.get_chatbot_response(user_input)
        fallback_response, fallback_confidence = self.get_fallback_response(user_input)
        
        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_level = self.determine_confidence_level(chatbot_confidence, fallback_confidence, intent)
        
        # 5. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        response, source = self.select_best_response(
            chatbot_response, chatbot_confidence,
            fallback_response, fallback_confidence,
            intent, user_input
        )
        
        # 6. –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã ChatGPT
        if response:
            response = self.apply_chatgpt_response_templates(
                response, user_input, intent, confidence_level
            )
        
        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        return self.save_to_history(user_input, response, f"{source} (Intent: {intent}, Confidence: {confidence_level})")
    
    def select_best_response(self, chatbot_response, chatbot_confidence, 
                           fallback_response, fallback_confidence, intent, user_input):
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        if intent == 'teaching':
            # –î–ª—è –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            if fallback_confidence >= 0.6:
                return fallback_response, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
            elif chatbot_confidence >= 0.4:
                return self.enhance_response(chatbot_response, user_input), "ChatterBot Enhanced"
            else:
                return self.generate_teaching_response(user_input), "–û–±—É—á–∞—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞"
        
        elif intent == 'question':
            # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã—Å–æ–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É
            if chatbot_confidence >= 0.7:
                return self.enhance_response(chatbot_response, user_input), "ChatterBot Enhanced"
            elif fallback_confidence >= 0.8:
                return fallback_response, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
            elif chatbot_confidence >= 0.5:
                return self.enhance_response(chatbot_response, user_input), "ChatterBot Enhanced"
            elif fallback_confidence > 0:
                return fallback_response, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
            else:
                return self.generate_contextual_unknown_response(user_input), "AI –°–∏—Å—Ç–µ–º–∞"
        
        elif intent == 'casual':
            # –î–ª—è –±–æ–ª—Ç–æ–≤–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –ª—é–±—ã–µ –æ—Ç–≤–µ—Ç—ã
            if chatbot_confidence >= 0.5:
                return chatbot_response, "ChatterBot"
            elif fallback_confidence > 0:
                return fallback_response, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
            else:
                return self.generate_casual_response(user_input), "Casual —Å–∏—Å—Ç–µ–º–∞"
        
        elif intent == 'request':
            # –î–ª—è –ø—Ä–æ—Å—å–± —Å—Ç–∞—Ä–∞–µ–º—Å—è –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º–∏
            if fallback_confidence >= 0.7:
                return fallback_response, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
            elif chatbot_confidence >= 0.6:
                return self.enhance_response(chatbot_response, user_input), "ChatterBot Enhanced"
            else:
                return self.generate_helpful_response(user_input), "–ü–æ–º–æ—â–Ω–∏–∫"
        
        else:
            # –î–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if chatbot_confidence >= 0.7:
                return self.enhance_response(chatbot_response, user_input), "ChatterBot Enhanced"
            elif fallback_confidence >= 0.8:
                return fallback_response, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
            elif chatbot_confidence >= 0.4:
                return self.enhance_response(chatbot_response, user_input), "ChatterBot Enhanced"
            elif fallback_confidence > 0:
                return fallback_response, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"
            else:
                return self.generate_contextual_unknown_response(user_input), "AI –°–∏—Å—Ç–µ–º–∞"
    
    def generate_teaching_response(self, user_input):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        responses = [
            "–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –Ø –∑–∞–ø–æ–º–Ω—é —ç—Ç–æ –∏ —Å–º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö!",
            "–ü–æ–Ω–∏–º–∞—é! –≠—Ç–æ –≤–∞–∂–Ω—ã–µ –∑–Ω–∞–Ω–∏—è. –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å —É–º–Ω–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ!",
            "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è—é –≤ —Å–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ!"
        ]
        return random.choice(responses)
    
    def generate_casual_response(self, user_input):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
        responses = [
            "–î–∞, —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–∞–∫–æ–µ –æ–±—â–µ–Ω–∏–µ. üòä",
            "–ü–æ–Ω–∏–º–∞—é! –û–±—â–µ–Ω–∏–µ - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. –ß—Ç–æ –µ—â–µ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å?",
            "–•–æ—Ä–æ—à–æ! –Ø —Ä–∞–¥, —á—Ç–æ –º—ã –º–æ–∂–µ–º —Ç–∞–∫ –ª–µ–≥–∫–æ –æ–±—â–∞—Ç—å—Å—è. ü§ñ",
            "–°–æ–≥–ª–∞—Å–µ–Ω! –¢–∞–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –¥–µ–ª–∞—é—Ç –æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—è—Ç–Ω—ã–º –∏ –∂–∏–≤—ã–º."
        ]
        return random.choice(responses)
    
    def generate_helpful_response(self, user_input):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—å–±"""
        responses = [
            "–ö–æ–Ω–µ—á–Ω–æ! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ!",
            "–•–æ—Ä–æ—à–æ! –Ø –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.",
            "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ! –ú–æ—è —Ü–µ–ª—å - –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ.",
            "–û—Ç–ª–∏—á–Ω–æ! –Ø –∏—Å–ø–æ–ª—å–∑—É—é –≤—Å–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ç–µ–±–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç."
        ]
        return random.choice(responses)
    
    def save_to_history(self, user_input, response, source):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.conversation_history.append({
            'user': user_input,
            'bot': response,
            'source': source,
            'timestamp': datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > 100:
            self.conversation_history = self.conversation_history[-100:]
        
        return response
    
    def analyze_user_intent(self, user_input):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_lower = user_input.lower().strip()
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        intent_patterns = {
            'question': [
                '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–æ–µ',
                '—Å–∫–æ–ª—å–∫–æ', '–æ—Ç–∫—É–¥–∞', '–∫—É–¥–∞', '—á–µ–º', '–º–æ–∂–µ—à—å –ª–∏', '—É–º–µ–µ—à—å –ª–∏', '–∑–Ω–∞–µ—à—å –ª–∏'
            ],
            'request': [
                '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏', '–ø–æ–∫–∞–∂–∏', '–ø–æ–º–æ–≥–∏', '—Å–¥–µ–ª–∞–π', '–Ω–∞–π–¥–∏', '–¥–∞–π',
                '–ø–æ–¥—Å–∫–∞–∂–∏', '–ø–æ—Å–æ–≤–µ—Ç—É–π', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–π', '–ø—Ä–µ–¥–ª–æ–∂–∏'
            ],
            'teaching': [
                '–Ω–∞—É—á–∏—Ç—å:', '–∑–∞–ø–æ–º–Ω–∏', '–≤—ã—É—á–∏', '–∑–Ω–∞–π —á—Ç–æ', '—ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç', '—ç—Ç–æ –∑–Ω–∞—á–∏—Ç'
            ],
            'casual': [
                '–ø—Ä–∏–≤–µ—Ç', '–ø–æ–∫–∞', '–∫–∞–∫ –¥–µ–ª–∞', '—Å–ø–∞—Å–∏–±–æ', '—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ', '–æ—Ç–ª–∏—á–Ω–æ',
                '–∫—Ä—É—Ç–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '—è—Å–Ω–æ'
            ],
            'comparison': [
                '—Ä–∞–∑–Ω–∏—Ü–∞', '–æ—Ç–ª–∏—á–∏–µ', '—Å—Ä–∞–≤–Ω–∏', '–ª—É—á—à–µ', '—Ö—É–∂–µ', 'vs', '–ø—Ä–æ—Ç–∏–≤', '–∏–ª–∏'
            ]
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        intent_scores = {}
        for intent, patterns in intent_patterns.items():
            score = 0
            for pattern in patterns:
                if pattern in user_lower:
                    score += 1
            intent_scores[intent] = score
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        if max(intent_scores.values()) == 0:
            return 'unknown'
        
        return max(intent_scores.items(), key=lambda x: x[1])[0]
    
    def analyze_conversation_context(self, user_input):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if len(self.conversation_history) < 1:
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_messages = self.conversation_history[-10:]
        user_input_lower = user_input.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conversation_topic = self.extract_conversation_topic(recent_messages)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞-—Ç—Ä–∏–≥–≥–µ—Ä—ã —Å –±–æ–ª–µ–µ —É–º–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        context_triggers = {
            '–ø—Ä–æ–¥–æ–ª–∂–∏': f'–ö–æ–Ω–µ—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞—è —Ç–µ–º—É –æ {conversation_topic}...',
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ': f'–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º! –î–æ–ø–æ–ª–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {conversation_topic}.',
            '–∞ —á—Ç–æ –Ω–∞—Å—á–µ—Ç': '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è —ç—Ç–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞...',
            '–æ–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ': '–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ!',
            '–¥–∞–π –ø—Ä–∏–º–µ—Ä': '–í–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è:',
            '–ø–æ—á–µ–º—É': '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å "–ø–æ—á–µ–º—É"! –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ...',
            '–∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç': '–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å–ª–µ–¥—É—é—â–∏–π:',
            '–≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞': '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –∑–∞–∫–ª—é—á–∞—é—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º:',
            '–º–æ–∂–µ—à—å –ª–∏': '–ö–æ–Ω–µ—á–Ω–æ! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.',
            '—á—Ç–æ –µ—Å–ª–∏': '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å! –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é...'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        for trigger, response_start in context_triggers.items():
            if trigger in user_input_lower:
                return f"{response_start} {self.generate_contextual_continuation(conversation_topic, user_input)}"
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        reference_words = ['—ç—Ç–æ', '—ç—Ç–æ–≥–æ', '—Ç–æ–≥–æ', '—Ç–∞–∫–æ–µ', '—Ç–∞–∫–æ–π', '–æ–Ω–æ', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–∏']
        if any(word in user_input_lower.split() for word in reference_words):
            return self.handle_reference_question(user_input, recent_messages, conversation_topic)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–º—ã
        if conversation_topic and self.is_related_to_topic(user_input, conversation_topic):
            return self.generate_topic_continuation(user_input, conversation_topic)
        
        return None
    
    def extract_conversation_topic(self, recent_messages):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not recent_messages:
            return "–æ–±—â–µ–Ω–∏–µ"
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        all_text = " ".join([msg['user'] + " " + msg['bot'] for msg in recent_messages[-5:]])
        
        # –°–ª–æ–≤–∞—Ä—å —Ç–µ–º –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        topic_keywords = {
            "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": ["–∏–∏", "ai", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–º–∞—à–∏–Ω–Ω–æ–µ", "–æ–±—É—á–µ–Ω–∏–µ"],
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": ["python", "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"],
            "–Ω–∞—É–∫–∞": ["—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç"],
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["–∫–æ–º–ø—å—é—Ç–µ—Ä", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "—Ü–∏—Ñ—Ä–æ–≤–æ–π"],
            "–∫–æ—Å–º–æ—Å": ["–∫–æ—Å–º–æ—Å", "–ø–ª–∞–Ω–µ—Ç–∞", "–∑–≤–µ–∑–¥–∞", "–≤—Å–µ–ª–µ–Ω–Ω–∞—è", "–≥–∞–ª–∞–∫—Ç–∏–∫–∞", "–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è"],
            "–∏—Å—Ç–æ—Ä–∏—è": ["–∏—Å—Ç–æ—Ä–∏—è", "–¥—Ä–µ–≤–Ω–∏–π", "–ø—Ä–æ—à–ª–æ–µ", "—Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è", "—ç–ø–æ—Ö–∞"],
            "–∏—Å–∫—É—Å—Å—Ç–≤–æ": ["–∏—Å–∫—É—Å—Å—Ç–≤–æ", "–º—É–∑—ã–∫–∞", "–∂–∏–≤–æ–ø–∏—Å—å", "–∫—É–ª—å—Ç—É—Ä–∞", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ"],
            "–∑–¥–æ—Ä–æ–≤—å–µ": ["–∑–¥–æ—Ä–æ–≤—å–µ", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–±–æ–ª–µ–∑–Ω—å", "–ª–µ—á–µ–Ω–∏–µ", "–≤—Ä–∞—á"]
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–º
        topic_scores = {}
        for topic, keywords in topic_keywords.items():
            score = sum(1 for keyword in keywords if keyword in all_text.lower())
            if score > 0:
                topic_scores[topic] = score
        
        if topic_scores:
            return max(topic_scores.items(), key=lambda x: x[1])[0]
        
        return "–æ–±—â–µ–Ω–∏–µ"
    
    def is_related_to_topic(self, user_input, topic):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –≤–æ–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º–æ–π"""
        topic_keywords = {
            "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": ["–∏–∏", "ai", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–º–∞—à–∏–Ω–Ω–æ–µ", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–¥–∞–Ω–Ω—ã–µ"],
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": ["–∫–æ–¥", "python", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "—Ñ—É–Ω–∫—Ü–∏—è", "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è"],
            "–Ω–∞—É–∫–∞": ["–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "—Ç–µ–æ—Ä–∏—è", "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç", "–Ω–∞—É—á–Ω—ã–π", "–æ—Ç–∫—Ä—ã—Ç–∏–µ"],
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "—Ü–∏—Ñ—Ä–æ–≤–æ–π", "–∏–Ω–Ω–æ–≤–∞—Ü–∏—è"],
            "–∫–æ—Å–º–æ—Å": ["–ø–ª–∞–Ω–µ—Ç–∞", "–∑–≤–µ–∑–¥–∞", "–≥–∞–ª–∞–∫—Ç–∏–∫–∞", "–≤—Å–µ–ª–µ–Ω–Ω–∞—è", "–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è"],
            "–∏—Å—Ç–æ—Ä–∏—è": ["–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π", "–¥—Ä–µ–≤–Ω–∏–π", "—ç–ø–æ—Ö–∞", "–≤–µ–∫", "–ø—Ä–æ—à–ª–æ–µ"],
            "–∏—Å–∫—É—Å—Å—Ç–≤–æ": ["—Ö—É–¥–æ–∂–Ω–∏–∫", "–º—É–∑—ã–∫–∞", "–∫–∞—Ä—Ç–∏–Ω–∞", "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π", "–∫—É–ª—å—Ç—É—Ä–∞"],
            "–∑–¥–æ—Ä–æ–≤—å–µ": ["–∑–¥–æ—Ä–æ–≤—ã–π", "–±–æ–ª–µ–∑–Ω—å", "–ª–µ—á–µ–Ω–∏–µ", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π", "–æ—Ä–≥–∞–Ω–∏–∑–º"]
        }
        
        if topic in topic_keywords:
            keywords = topic_keywords[topic]
            return any(keyword in user_input.lower() for keyword in keywords)
        
        return False
    
    def generate_topic_continuation(self, user_input, topic):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ–º—ã"""
        topic_responses = {
            "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": [
                "–ü—Ä–æ–¥–æ–ª–∂–∞—è –Ω–∞—à—É –±–µ—Å–µ–¥—É –æ–± –ò–ò - —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –æ–±–ª–∞—Å—Ç—å!",
                "–í–æ–∑–≤—Ä–∞—â–∞—è—Å—å –∫ —Ç–µ–º–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ - –µ—Å—Ç—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤.",
                "–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ–± –ò–ò - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
            ],
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": [
                "–†–∞–∑–≤–∏–≤–∞—è —Ç–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –æ—á–µ–Ω—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!",
                "–í —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞ - –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
                "–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞–∑–≥–æ–≤–æ—Ä –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ - —ç—Ç–æ –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç!"
            ],
            "–Ω–∞—É–∫–∞": [
                "–£–≥–ª—É–±–ª—è—è—Å—å –≤ –Ω–∞—É—á–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!",
                "–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞—à–µ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!",
                "–†–∞–∑–≤–∏–≤–∞—è –Ω–∞—É—á–Ω—É—é —Ç–µ–º—É - –¥–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–µ–µ."
            ]
        }
        
        if topic in topic_responses:
            return random.choice(topic_responses[topic])
        
        return f"–ü—Ä–æ–¥–æ–ª–∂–∞—è –Ω–∞—à—É –±–µ—Å–µ–¥—É –æ {topic} - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
    
    def generate_contextual_continuation(self, topic, current_input):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–µ–º—ã"""
        continuations = [
            f"–ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ –æ {topic}, —Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ! üß†",
            f"–†–∞–∑–≤–∏–≤–∞—è —Ç–µ–º—É {topic} –¥–∞–ª—å—à–µ, —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã! üí°",
            f"–£–≥–ª—É–±–ª—è—è—Å—å –≤ –≤–æ–ø—Ä–æ—Å –æ {topic}, —è –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏! üìö",
            f"–ü—Ä–æ–¥–æ–ª–∂–∞—è –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –æ {topic}, —Ö–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! ‚ú®"
        ]
        return random.choice(continuations)
    
    def handle_reference_question(self, user_input, recent_messages, current_topic):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not recent_messages:
            return None
        
        last_topic = recent_messages[-1]['user'] if recent_messages else ""
        responses = [
            f"–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ—é –º—ã—Å–ª—å! –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ —Ç–æ, —á—Ç–æ –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ '{last_topic}', —Ç–æ –º–æ–≥—É –ø–æ—è—Å–Ω–∏—Ç—å! ü§î",
            f"–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í–æ–∑–≤—Ä–∞—â–∞—è—Å—å –∫ –Ω–∞—à–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É –ø—Ä–æ '{last_topic}' - —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! üí≠",
            f"–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –ï—Å–ª–∏ —Ç—ã –ø—Ä–æ —Ç–æ, —á—Ç–æ –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏ –ø—Ä–æ '{last_topic}', —Ç–æ –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º! üéØ",
            f"–ü–æ–Ω–∏–º–∞—é! –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–æ '{last_topic}' - —ç—Ç–æ –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç! üîç"
        ]
        return random.choice(responses)
    
    def apply_chatgpt_response_templates(self, response, user_input, intent, confidence_level):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∫ –≤ ChatGPT"""
        # –®–∞–±–ª–æ–Ω—ã –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        intent_templates = {
            'question': [
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ ",
                "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –ü–æ–∑–≤–æ–ª—å –æ–±—ä—è—Å–Ω–∏—Ç—å: ",
                "–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ—é –º—ã—Å–ª—å! –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ —ç—Ç–æ, —Ç–æ ",
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º: "
            ],
            'request': [
                "–ö–æ–Ω–µ—á–Ω–æ! –° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É. ",
                "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ. ",
                "–•–æ—Ä–æ—à–æ! –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. ",
                "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å: "
            ],
            'casual': [
                "–ü–æ–Ω–∏–º–∞—é! ",
                "–î–∞, —ç—Ç–æ —Ç–∞–∫! ",
                "–°–æ–≥–ª–∞—Å–µ–Ω! ",
                "–ê–±—Å–æ–ª—é—Ç–Ω–æ! "
            ],
            'comparison': [
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è! ",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —ç—Ç–∏ –ø–æ–Ω—è—Ç–∏—è! ",
                "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —Ä–∞–∑–ª–∏—á–∏—è: ",
                "–•–æ—Ä–æ—à–∞—è —Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! "
            ]
        }
        
        # –®–∞–±–ª–æ–Ω—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_templates = {
            'high': {
                'endings': [
                    " –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–≥–ª–æ –ø—Ä–æ—è—Å–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å!",
                    " –≠—Ç–æ —Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö.",
                    " –£–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!"
                ]
            },
            'medium': {
                'beginnings': [
                    "–ù–∞—Å–∫–æ–ª—å–∫–æ —è –ø–æ–Ω–∏–º–∞—é, ",
                    "–°—É–¥—è –ø–æ –º–æ–∏–º –∑–Ω–∞–Ω–∏—è–º, ",
                    "–í–µ—Ä–æ—è—Ç–Ω–æ, ",
                    "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, "
                ],
                'endings': [
                    " –ù–æ —Å—Ç–æ–∏—Ç —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏.",
                    " –•–æ—Ç—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—é–∞–Ω—Å—ã.",
                    " –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É."
                ]
            },
            'low': {
                'beginnings': [
                    "–ù–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ ",
                    "–≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤–µ—Ä–æ—è—Ç–Ω–æ ",
                    "–ù–∞—Å–∫–æ–ª—å–∫–æ –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ ",
                    "–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è, –Ω–æ –∫–∞–∂–µ—Ç—Å—è "
                ],
                'endings': [
                    " –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                    " –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.",
                    " –õ—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤."
                ]
            }
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –Ω–∞—á–∞–ª–∞ –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if intent in intent_templates and confidence_level == 'high':
            template_start = random.choice(intent_templates[intent])
            response = template_start + response.lower() if response else response
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence_level in confidence_templates:
            conf_template = confidence_templates[confidence_level]
            
            if 'beginnings' in conf_template and not any(response.startswith(template) for template in intent_templates.get(intent, [])):
                beginning = random.choice(conf_template['beginnings'])
                response = beginning + response.lower() if response else response
            
            if 'endings' in conf_template:
                ending = random.choice(conf_template['endings'])
                response = response + ending if response else response
        
        return response
    
    def determine_confidence_level(self, chatbot_confidence, fallback_confidence, intent):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ"""
        max_confidence = max(chatbot_confidence, fallback_confidence)
        
        if max_confidence >= 0.8:
            return 'high'
        elif max_confidence >= 0.5:
            return 'medium'
        else:
            return 'low'
    
    def enhance_response(self, base_response, user_input):
        """–£–ª—É—á—à–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –≤ ChatGPT"""
        if not base_response or len(base_response.strip()) < 10:
            return base_response
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        enhancements = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        question_type = self.analyze_question_type(user_input)
        
        if question_type == "definition":
            enhancements.append("üìñ –ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:")
        elif question_type == "how_to":
            enhancements.append("üîß –ü–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥:")
        elif question_type == "why":
            enhancements.append("ü§î –ü—Ä–∏—á–∏–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º:")
        elif question_type == "comparison":
            enhancements.append("‚öñÔ∏è –°—Ä–∞–≤–Ω–∏–≤–∞—è —ç—Ç–∏ –ø–æ–Ω—è—Ç–∏—è:")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
        if len(base_response) < 100:
            value_additions = [
                "\n\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –æ—á–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏ —Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è –æ–±–ª–∞—Å—Ç—å!",
                "\n\nüéØ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–Ω–æ–≥–∏—Ö!",
                "\n\n‚ú® –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–≥–ª–æ –ø—Ä–æ—è—Å–Ω–∏—Ç—å —Ç–µ–º—É! –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?",
                "\n\nüöÄ –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –≤ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö!"
            ]
            base_response += random.choice(value_additions)
        
        return base_response
    
    def analyze_question_type(self, user_input):
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        user_lower = user_input.lower()
        
        if any(word in user_lower for word in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '—ç—Ç–æ']):
            return "definition"
        elif any(word in user_lower for word in ['–∫–∞–∫', '–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º', '—Å–ø–æ—Å–æ–±']):
            return "how_to"
        elif any(word in user_lower for word in ['–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–ø–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ']):
            return "why"
        elif any(word in user_lower for word in ['—Ä–∞–∑–Ω–∏—Ü–∞', '–æ—Ç–ª–∏—á–∏–µ', '—Å—Ä–∞–≤–Ω–∏', 'vs', '–∏–ª–∏']):
            return "comparison"
        else:
            return "general"
    
    def generate_contextual_unknown_response(self, user_input):
        """–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã –∫–∞–∫ –≤ ChatGPT"""
        question_type = self.analyze_question_type(user_input)
        
        if question_type == "definition":
            responses = [
                f"ü§î '{user_input}' - –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ! –Ø –∏–∑—É—á–∞—é —ç—Ç—É —Ç–µ–º—É, –Ω–æ –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –¥–∞—Ç—å —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏?",
                f"üìö –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ '{user_input}' —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–º–æ–≥–∏ –º–Ω–µ –ø–æ–Ω—è—Ç—å —ç—Ç–æ –ª—É—á—à–µ!",
            ]
        elif question_type == "how_to":
            responses = [
                f"üîß –í–æ–ø—Ä–æ—Å '–∫–∞–∫ {user_input}' –æ—á–µ–Ω—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π! –Ø —É—á—É—Å—å —Ä–µ—à–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–¥–∞—á–∏. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ!",
                f"üí° –ú–µ—Ç–æ–¥—ã –¥–ª—è '{user_input}' –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏. –ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º?",
            ]
        elif question_type == "why":
            responses = [
                f"ü§î –í–æ–ø—Ä–æ—Å '–ø–æ—á–µ–º—É {user_input}' —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—á–∏–Ω –∏ —Å–ª–µ–¥—Å—Ç–≤–∏–π. –≠—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é!",
                f"üß† –ü—Ä–∏—á–∏–Ω—ã '{user_input}' –º–æ–≥—É—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–º–∏. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ!",
            ]
        else:
            responses = [
                f"üöÄ '{user_input}' - —ç—Ç–æ —Ç–∞ –æ–±–ª–∞—Å—Ç—å, –≥–¥–µ —è –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å! –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ!",
                f"üí≠ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ '{user_input}'! –ú–æ–π –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ß—Ç–æ –¥—É–º–∞–µ—à—å —Ç—ã?",
                f"üéØ '{user_input}' –ø–æ–ø–∞–ª –≤ –º–æ—é –∑–æ–Ω—É —Ä–æ—Å—Ç–∞! –ö–∞–∂–¥–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —É–º–Ω–µ–µ. –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ!",
            ]
        
        return random.choice(responses)
    
    def generate_unknown_response(self, user_input):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ç–µ–º—ã"""
        unknown_responses = [
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ '{user_input}'! –Ø –∏–∑—É—á—É —ç—Ç—É —Ç–µ–º—É –∏ —Å—Ç–∞–Ω—É —É–º–Ω–µ–µ ü§ì",
            f"–ü—Ä–æ '{user_input}' —è –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—é. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ! üìö",
            f"'{user_input}' - –Ω–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –º–µ–Ω—è. –ü–æ–º–æ–≥–∏ –º–Ω–µ –ø–æ–Ω—è—Ç—å! üß†",
            "–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å! –ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å —ç—Ç–æ –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏? üí°",
            "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ú–æ—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... üîÑ"
        ]
        return random.choice(unknown_responses)
    
    def add_knowledge(self, topic, info):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π"""
        topic_key = topic.lower()
        
        if topic_key not in self.fallback_knowledge:
            self.fallback_knowledge[topic_key] = []
        
        self.fallback_knowledge[topic_key].append(info)
        self.save_fallback_knowledge()
        
        # –¢–∞–∫–∂–µ –æ–±—É—á–∞–µ–º ChatterBot –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.chatbot_available and self.chatbot:
            try:
                trainer = ListTrainer(self.chatbot)
                trainer.train([topic, info])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è ChatterBot: {e}")
        
        thanks_responses = [
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –ø—Ä–æ {topic} –±–ª–∞–≥–æ–¥–∞—Ä—è –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é! üß†",
            f"–°–ø–∞—Å–∏–±–æ! –ú–æ—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–ø–æ–º–Ω–∏–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ {topic}! ‚ö°",
            f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –Ø —Å—Ç–∞–ª —É–º–Ω–µ–µ - —Ç–µ–ø–µ—Ä—å –∑–Ω–∞—é –ø—Ä–æ {topic}! üöÄ",
            f"–°—É–ø–µ—Ä! –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ {topic} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! üíæ"
        ]
        return random.choice(thanks_responses)
    
    def load_encyclopedia_knowledge(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Å–∏–≤–Ω–æ–π —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        encyclopedia_data = {
            # –ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏|–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ|deep learning": [
                "üß† **–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏** - —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º–æ–∑–≥–∞.\n\n‚ö° **–¢–∏–ø—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π:**\n‚Ä¢ –ü–µ—Ä—Å–µ–ø—Ç—Ä–æ–Ω (–ø—Ä–æ—Å—Ç–µ–π—à–∞—è)\n‚Ä¢ CNN (—Å–≤—ë—Ä—Ç–æ—á–Ω—ã–µ - –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)\n‚Ä¢ RNN (—Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ - –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π)\n‚Ä¢ Transformer (–¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π)\n\nüöÄ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ ChatGPT, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –ª–∏—Ü, –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞—Ö!"
            ],
            "–±–ª–æ–∫—á–µ–π–Ω|–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã|–±–∏—Ç–∫–æ–∏–Ω": [
                "‚õìÔ∏è **–ë–ª–æ–∫—á–µ–π–Ω** - —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤.\n\nüíé **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n‚Ä¢ –î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–µ—Ç –µ–¥–∏–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞)\n‚Ä¢ –ù–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–µ–π\n‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞\n\n‚Çø Bitcoin –±—ã–ª –ø–µ—Ä–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (2009), —Å–µ–π—á–∞—Å –∏—Ö —Ç—ã—Å—è—á–∏!"
            ],
            "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã|–∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞": [
                "‚öõÔ∏è **–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã** –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–≤–∞–Ω—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.\n\nüåü **–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**\n‚Ä¢ –°—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏—è (–∫—É–±–∏—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏ 1 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)\n‚Ä¢ –ó–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å (—Å–≤—è–∑—å –º–µ–∂–¥—É —á–∞—Å—Ç–∏—Ü–∞–º–∏)\n‚Ä¢ –ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º\n\nüöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤ –º–∏–ª–ª–∏–æ–Ω—ã —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤!"
            ],
            
            # –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Å—Ç—Ä–∞–Ω—ã
            "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è|–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã|—Å—Ç—Ä–∞–Ω—ã –º–∏—Ä–∞": [
                "üåç **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è** –∏–∑—É—á–∞–µ—Ç –ó–µ–º–ª—é, –µ—ë –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –∏ —Ä–µ—Å—É—Ä—Å—ã.\n\nüó∫Ô∏è **7 –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤:**\n‚Ä¢ –ê–∑–∏—è (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)\n‚Ä¢ –ê—Ñ—Ä–∏–∫–∞ (—Å–∞–º—ã–π –∂–∞—Ä–∫–∏–π)\n‚Ä¢ –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞\n‚Ä¢ –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞\n‚Ä¢ –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞ (—Å–∞–º—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π)\n‚Ä¢ –ï–≤—Ä–æ–ø–∞\n‚Ä¢ –ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –û–∫–µ–∞–Ω–∏—è\n\nüìä –ù–∞ –ó–µ–º–ª–µ 195 –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤!"
            ],
            "–æ–∫–µ–∞–Ω—ã|–º–æ—Ä—è|–≤–æ–¥–∞ –Ω–∞ –∑–µ–º–ª–µ": [
                "üåä **–ú–∏—Ä–æ–≤–æ–π –æ–∫–µ–∞–Ω** –ø–æ–∫—Ä—ã–≤–∞–µ—Ç 71% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏.\n\nüèä **5 –æ–∫–µ–∞–Ω–æ–≤:**\n‚Ä¢ –¢–∏—Ö–∏–π (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π - 165 –º–ª–Ω –∫–º¬≤)\n‚Ä¢ –ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π\n‚Ä¢ –ò–Ω–¥–∏–π—Å–∫–∏–π\n‚Ä¢ –°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π\n‚Ä¢ –Æ–∂–Ω—ã–π (–ê–Ω—Ç–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π)\n\nüêã –í –æ–∫–µ–∞–Ω–∞—Ö –æ–±–∏—Ç–∞–µ—Ç 80% –≤—Å–µ–π –∂–∏–∑–Ω–∏ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ!"
            ],
            
            # –ë–∏–æ–ª–æ–≥–∏—è –∏ –ø—Ä–∏—Ä–æ–¥–∞
            "—ç–≤–æ–ª—é—Ü–∏—è|–¥–∞—Ä–≤–∏–Ω|–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä": [
                "üß¨ **–¢–µ–æ—Ä–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ –î–∞—Ä–≤–∏–Ω–∞** –æ–±—ä—è—Å–Ω—è–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ –∂–∏–∑–Ω–∏ –Ω–∞ –ó–µ–º–ª–µ.\n\nüåø **–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**\n‚Ä¢ –ò–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å (–æ—Ä–≥–∞–Ω–∏–∑–º—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è)\n‚Ä¢ –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (–ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ—Ç–æ–º–∫–∞–º)\n‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä (–≤—ã–∂–∏–≤–∞—é—Ç –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω—ã–µ)\n‚Ä¢ –í–∏–¥–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n\nü¶ï –ñ–∏–∑–Ω—å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —É–∂–µ 3.8 –º–ª—Ä–¥ –ª–µ—Ç!"
            ],
            "—ç–∫–æ—Å–∏—Å—Ç–µ–º—ã|–±–∏–æ–º—ã|–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –∑–æ–Ω—ã": [
                "üå≤ **–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞** - —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –∂–∏–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –∏ –∏—Ö —Å—Ä–µ–¥—ã –æ–±–∏—Ç–∞–Ω–∏—è.\n\nüèûÔ∏è **–û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–æ–º—ã:**\n‚Ä¢ –¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ –ª–µ—Å–∞ (–Ω–∞–∏–±–æ–ª—å—à–µ–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ)\n‚Ä¢ –°–∞–≤–∞–Ω–Ω—ã –∏ —Å—Ç–µ–ø–∏\n‚Ä¢ –ü—É—Å—Ç—ã–Ω–∏\n‚Ä¢ –•–≤–æ–π–Ω—ã–µ –ª–µ—Å–∞ (—Ç–∞–π–≥–∞)\n‚Ä¢ –¢—É–Ω–¥—Ä–∞\n‚Ä¢ –ú–æ—Ä—Å–∫–∏–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã\n\nü¶ã –ö–∞–∂–¥–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏ –≤–∞–∂–Ω–∞!"
            ],
            
            # –§–∏–∑–∏–∫–∞ –∏ —Ö–∏–º–∏—è
            "–∞—Ç–æ–º–Ω–∞—è —Ñ–∏–∑–∏–∫–∞|—Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å|—è–¥–µ—Ä–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è": [
                "‚öõÔ∏è **–ê—Ç–æ–º–Ω–∞—è —Ñ–∏–∑–∏–∫–∞** –∏–∑—É—á–∞–µ—Ç —Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∞—Ç–æ–º–æ–≤.\n\nüí• **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ç–æ–º–∞:**\n‚Ä¢ –Ø–¥—Ä–æ (–ø—Ä–æ—Ç–æ–Ω—ã + –Ω–µ–π—Ç—Ä–æ–Ω—ã)\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –æ–±–æ–ª–æ—á–∫–∏\n‚Ä¢ 99.97% –º–∞—Å—Å—ã –≤ —è–¥—Ä–µ\n‚Ä¢ –†–∞–∑–º–µ—Ä —è–¥—Ä–∞: 10‚Åª¬π‚Åµ –º\n\n‚ö° –Ø–¥–µ—Ä–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 10% –º–∏—Ä–æ–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏!"
            ],
            "–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è|—É–≥–ª–µ—Ä–æ–¥|–º–æ–ª–µ–∫—É–ª—ã –∂–∏–∑–Ω–∏": [
                "üß™ **–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è** –∏–∑—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–≥–ª–µ—Ä–æ–¥–∞ - –æ—Å–Ω–æ–≤—É –∂–∏–∑–Ω–∏.\n\nüíé **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —É–≥–ª–µ—Ä–æ–¥–∞:**\n‚Ä¢ –ú–æ–∂–µ—Ç –æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å 4 —Å–≤—è–∑–∏\n‚Ä¢ –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Ü–µ–ø–∏\n‚Ä¢ –û—Å–Ω–æ–≤–∞ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤, —É–≥–ª–µ–≤–æ–¥–æ–≤, –î–ù–ö\n\nüå± –í—Å–µ –∂–∏–≤—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–º—ã —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –º–æ–ª–µ–∫—É–ª!"
            ],
            
            # –ò—Å—Ç–æ—Ä–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞
            "–¥—Ä–µ–≤–Ω–∏–µ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏|–º–µ—Å–æ–ø–æ—Ç–∞–º–∏—è|–µ–≥–∏–ø–µ—Ç": [
                "üèõÔ∏è **–î—Ä–µ–≤–Ω–∏–µ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏** –∑–∞–ª–æ–∂–∏–ª–∏ –æ—Å–Ω–æ–≤—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∏—Ä–∞.\n\nüìú **–í–µ–ª–∏–∫–∏–µ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏:**\n‚Ä¢ –®—É–º–µ—Ä—ã (–ø–µ—Ä–≤–∞—è –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç—å - 3200 –¥–æ –Ω.—ç.)\n‚Ä¢ –î—Ä–µ–≤–Ω–∏–π –ï–≥–∏–ø–µ—Ç (–ø–∏—Ä–∞–º–∏–¥—ã, –º—É–º–∏—Ñ–∏–∫–∞—Ü–∏—è)\n‚Ä¢ –•–∞—Ä–∞–ø–ø—Å–∫–∞—è —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è (–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è)\n‚Ä¢ –î—Ä–µ–≤–Ω–∏–π –ö–∏—Ç–∞–π (–±—É–º–∞–≥–∞, –ø–æ—Ä–æ—Ö)\n\nüéØ –ö–∞–∂–¥–∞—è –≤–Ω–µ—Å–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ!"
            ],
            "–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ|—Ä–µ–Ω–µ—Å—Å–∞–Ω—Å|–ª–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –≤–∏–Ω—á–∏": [
                "üé® **–≠–ø–æ—Ö–∞ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è** (XIV-XVI –≤–µ–∫–∞) - —Ä–∞—Å—Ü–≤–µ—Ç –Ω–∞—É–∫–∏ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞.\n\nüåü **–í–µ–ª–∏–∫–∏–µ –¥–µ—è—Ç–µ–ª–∏:**\n‚Ä¢ –õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–∏–π)\n‚Ä¢ –ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ (—Å–∫—É–ª—å–ø—Ç–æ—Ä, —Ö—É–¥–æ–∂–Ω–∏–∫)\n‚Ä¢ –†–∞—Ñ–∞—ç–ª—å (–∂–∏–≤–æ–ø–∏—Å–µ—Ü)\n‚Ä¢ –ì–∞–ª–∏–ª–µ–π (–∞—Å—Ç—Ä–æ–Ω–æ–º)\n\nüí° –ü–µ—Ä–∏–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ—Ç –°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å—è –∫ –ù–æ–≤–æ–º—É –≤—Ä–µ–º–µ–Ω–∏!"
            ],
            
            # –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
            "–∏–º–º—É–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞|–≤–∏—Ä—É—Å—ã|–±–∞–∫—Ç–µ—Ä–∏–∏": [
                "üõ°Ô∏è **–ò–º–º—É–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞** –∑–∞—â–∏—â–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–º –æ—Ç –±–æ–ª–µ–∑–Ω–µ–π.\n\n‚öîÔ∏è **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞:**\n‚Ä¢ –ë–µ–ª—ã–µ –∫—Ä–æ–≤—è–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ (–ª–µ–π–∫–æ—Ü–∏—Ç—ã)\n‚Ä¢ –ê–Ω—Ç–∏—Ç–µ–ª–∞ (—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞)\n‚Ä¢ –õ–∏–º—Ñ–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞\n‚Ä¢ –ö–æ—Å—Ç–Ω—ã–π –º–æ–∑–≥ (–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫)\n\nü¶† –ë–æ—Ä–µ—Ç—Å—è —Å –≤–∏—Ä—É—Å–∞–º–∏, –±–∞–∫—Ç–µ—Ä–∏—è–º–∏, —Ä–∞–∫–æ–≤—ã–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏!"
            ],
            "–≥–µ–Ω–µ—Ç–∏–∫–∞|–≥–µ–Ω—ã|–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å": [
                "üß¨ **–ì–µ–Ω–µ—Ç–∏–∫–∞** –∏–∑—É—á–∞–µ—Ç –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å.\n\nüìä **–û—Å–Ω–æ–≤—ã –≥–µ–Ω–µ—Ç–∏–∫–∏:**\n‚Ä¢ –ì–µ–Ω—ã - —É—á–∞—Å—Ç–∫–∏ –î–ù–ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n‚Ä¢ –•—Ä–æ–º–æ—Å–æ–º—ã - –Ω–æ—Å–∏—Ç–µ–ª–∏ –≥–µ–Ω–æ–≤ (—É —á–µ–ª–æ–≤–µ–∫–∞ 46)\n‚Ä¢ –ê–ª–ª–µ–ª–∏ - –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ –≥–µ–Ω–∞\n‚Ä¢ –ú—É—Ç–∞—Ü–∏–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –î–ù–ö\n\nüë∂ –†–µ–±–µ–Ω–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 50% –≥–µ–Ω–æ–≤ –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è!"
            ],
            
            # –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –±–∏–∑–Ω–µ—Å
            "–º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞|–∏–Ω—Ñ–ª—è—Ü–∏—è|–≤–≤–ø": [
                "üìà **–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞** –∏–∑—É—á–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫—É —Å—Ç—Ä–∞–Ω—ã –≤ —Ü–µ–ª–æ–º.\n\nüí∞ **–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n‚Ä¢ –í–í–ü (–≤–∞–ª–æ–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç)\n‚Ä¢ –ò–Ω—Ñ–ª—è—Ü–∏—è (—Ä–æ—Å—Ç —Ü–µ–Ω)\n‚Ä¢ –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞\n‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å\n‚Ä¢ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–ª–≥\n\nüåç –≠–∫–æ–Ω–æ–º–∏–∫–∏ —Å—Ç—Ä–∞–Ω –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –º–∏—Ä–µ!"
            ],
            "—Å—Ç–∞—Ä—Ç–∞–ø—ã|–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ|–±–∏–∑–Ω–µ—Å": [
                "üöÄ **–°—Ç–∞—Ä—Ç–∞–ø** - –º–æ–ª–æ–¥–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å—é.\n\nüí° **–£—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã:**\n‚Ä¢ Google (–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ)\n‚Ä¢ Facebook (—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏)\n‚Ä¢ Tesla (—ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏)\n‚Ä¢ SpaceX (–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)\n\nüìä –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ —Ç–µ—Ä–ø—è—Ç –Ω–µ—É–¥–∞—á—É, –Ω–æ —É—Å–ø–µ—à–Ω—ã–µ –º–µ–Ω—è—é—Ç –º–∏—Ä!"
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è
        for topic, responses in encyclopedia_data.items():
            if topic not in self.fallback_knowledge:
                self.fallback_knowledge[topic] = responses
        
        self.save_fallback_knowledge()
        print("üìö –≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = WebAdvancedFutureChat()

# HTML —à–∞–±–ª–æ–Ω (—É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω)
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß† FutureChat Advanced - –£–º–Ω—ã–π AI –ß–∞—Ç-–±–æ—Ç</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: gradientShift 10s ease infinite;
        }
        
        @keyframes gradientShift {
            0%, 100% { background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%); }
            33% { background: linear-gradient(135deg, #764ba2 0%, #f093fb 50%, #667eea 100%); }
            66% { background: linear-gradient(135deg, #f093fb 0%, #667eea 50%, #764ba2 100%); }
        }
        
        .chat-container {
            width: 100%;
            max-width: 1200px;
            height: 100vh;
            background: #ffffff;
            border-radius: 0;
            box-shadow: none;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            border: none;
        }
        
        .chat-header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 25px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .chat-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            animation: shimmer 3s infinite;
        }
        
        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .chat-header h1 {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 8px;
            position: relative;
            z-index: 1;
        }
        
        .chat-header .subtitle {
            font-size: 16px;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }
        
        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            background: #4CAF50;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .chat-messages {
            flex: 1;
            padding: 25px;
            overflow-y: auto;
            background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
            position: relative;
        }
        
        .message {
            margin-bottom: 20px;
            display: flex;
            align-items: flex-start;
            animation: messageSlide 0.3s ease-out;
        }
        
        @keyframes messageSlide {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .message.user {
            justify-content: flex-end;
        }
        
        .message-content {
            max-width: 75%;
            padding: 15px 20px;
            border-radius: 20px;
            font-size: 16px;
            line-height: 1.5;
            position: relative;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        .message.user .message-content {
            background: #f7f7f8;
            color: #1a1a1a;
            border-bottom-right-radius: 8px;
            border: 1px solid #e5e5e7;
        }
        
        .message.bot .message-content {
            background: #ffffff;
            color: #1a1a1a;
            border: 1px solid #e5e5e7;
            border-bottom-left-radius: 8px;
            position: relative;
        }
        
        .message.bot .message-content::before {
            content: 'üß† FutureChat GPT';
            position: absolute;
            top: -25px;
            left: 0;
            font-size: 12px;
            font-weight: bold;
            color: #10a37f;
            background: white;
            padding: 2px 8px;
            border-radius: 4px;
            border: 1px solid #e5e5e7;
        }
        
        .message-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            margin: 0 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: bold;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
        }
        
        .message.user .message-avatar {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            color: white;
        }
        
        .message.bot .message-avatar {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
        }
        
        .commands-hint {
            padding: 20px;
            background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
            border-left: 4px solid #2196f3;
            margin-bottom: 25px;
            border-radius: 0 12px 12px 0;
            font-size: 14px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .commands-hint strong {
            color: #1976d2;
        }
        
        .chat-input {
            padding: 25px;
            background: white;
            border-top: 1px solid #e9ecef;
        }
        
        .input-container {
            display: flex;
            gap: 12px;
            align-items: center;
        }
        
        #messageInput {
            flex: 1;
            padding: 18px 25px;
            border: 2px solid #e9ecef;
            border-radius: 30px;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }
        
        #messageInput:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            background: white;
        }
        
        #sendButton {
            padding: 18px 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 30px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }
        
        #sendButton:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }
        
        #sendButton:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .typing-indicator {
            display: none;
            padding: 15px 0;
            font-style: italic;
            color: #666;
            text-align: center;
        }
        
        .typing-dots {
            display: inline-block;
        }
        
        .typing-dots::after {
            content: '...';
            animation: dots 1.5s infinite;
        }
        
        @keyframes dots {
            0%, 20% { content: '.'; }
            40% { content: '..'; }
            60%, 100% { content: '...'; }
        }
        
        @media (max-width: 600px) {
            .chat-container {
                width: 95%;
                height: 95vh;
                border-radius: 20px;
            }
            
            .message-content {
                max-width: 85%;
                font-size: 15px;
            }
            
            .chat-header h1 {
                font-size: 24px;
            }
            
            .chat-messages {
                padding: 20px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h1>üß† FutureChat Advanced</h1>
            <div class="subtitle">
                <span class="status-indicator"></span>
                –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â—å AI!
            </div>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="commands-hint">
                <strong>üî• –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏:</strong><br>
                ‚Ä¢ <strong>üß† –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ChatterBot</strong> - —Å–∞–º—ã–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã<br>
                ‚Ä¢ <strong>üìö –Ω–∞—É—á–∏—Ç—å: —Ç–µ–º–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</strong> - –æ–±—É—á–∏ –º–µ–Ω—è –Ω–æ–≤–æ–º—É<br>
                ‚Ä¢ <strong>üïê –≤—Ä–µ–º—è</strong> –∏–ª–∏ <strong>üìÖ –¥–∞—Ç–∞</strong> - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è<br>
                ‚Ä¢ <strong>üî¢ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞</strong> - —Ä–µ—à–∞—é –ª—é–±—ã–µ –ø—Ä–∏–º–µ—Ä—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ<br>
                ‚Ä¢ <strong>üìñ —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è</strong> - –æ–≥—Ä–æ–º–Ω–∞—è –±–∞–∑–∞ –Ω–∞—É—á–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π<br>
                ‚Ä¢ <strong>üí≠ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</strong> - –ø–æ–º–Ω—é –≤–µ—Å—å –¥–∏–∞–ª–æ–≥
            </div>
            
            <div class="message bot">
                <div class="message-avatar">üß†</div>
                <div class="message-content">
                    –ü—Ä–∏–≤–µ—Ç! –Ø FutureChat Advanced - —É–º–Ω—ã–π AI –±–æ—Ç —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º! üöÄ<br><br>
                    –ò—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ChatterBot, –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.<br>
                    –ö–∞–∂–¥—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —É–º–Ω–µ–µ! –î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è! ü§ñ‚ú®
                </div>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç<span class="typing-dots"></span>
        </div>
        
        <div class="chat-input">
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="–ù–∞–ø–∏—à–∏ —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                       onkeypress="handleKeyPress(event)">
                <button id="sendButton" onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>
    </div>

    <script>
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const typingIndicator = document.getElementById('typingIndicator');

        function typeMessage(content, messageDiv) {
            const messageContent = messageDiv.querySelector('.message-content');
            let i = 0;
            messageContent.innerHTML = '';
            
            const typingSpeed = 30; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–∏–º–≤–æ–ª
            
            function typeNextChar() {
                if (i < content.length) {
                    messageContent.innerHTML += content.charAt(i);
                    i++;
                    setTimeout(typeNextChar, typingSpeed);
                    scrollToBottom();
                } else {
                    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
                    scrollToBottom();
                }
            }
            
            typeNextChar();
        }

        function addMessage(content, isUser = false, shouldType = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = isUser ? 'üë§' : 'üß†';
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            
            if (isUser) {
                messageContent.innerHTML = content.replace(/\\n/g, '<br>');
                messageDiv.appendChild(messageContent);
                messageDiv.appendChild(avatar);
                chatMessages.appendChild(messageDiv);
                scrollToBottom();
            } else {
                messageDiv.appendChild(avatar);
                messageDiv.appendChild(messageContent);
                chatMessages.appendChild(messageDiv);
                
                if (shouldType && content.length > 20) {
                    typeMessage(content.replace(/\\n/g, '<br>'), messageDiv);
                } else {
                    messageContent.innerHTML = content.replace(/\\n/g, '<br>');
                    scrollToBottom();
                }
            }
        }

        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function showTyping() {
            typingIndicator.style.display = 'block';
            scrollToBottom();
        }

        function hideTyping() {
            typingIndicator.style.display = 'none';
        }

        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            addMessage(message, true);
            messageInput.value = '';
            sendButton.disabled = true;
            showTyping();

            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message })
                });

                const data = await response.json();
                
                // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
                const processingTime = 800 + (data.response.length * 20);
                setTimeout(() => {
                    hideTyping();
                    addMessage(data.response, false, true); // –í–∫–ª—é—á–∞–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é
                    sendButton.disabled = false;
                    messageInput.focus();
                }, processingTime);

            } catch (error) {
                hideTyping();
                addMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. ü§ñ');
                sendButton.disabled = false;
                console.error('–û—à–∏–±–∫–∞:', error);
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        messageInput.focus();
        
        // –ê–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        setTimeout(() => {
            addMessage('–ì–æ—Ç–æ–≤ –∫ —É–º–Ω–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É! –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?" –∏–ª–∏ "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 25 * 4?" ü§ì');
        }, 2000);
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/chat', methods=['POST'])
def chat():
    """API –¥–ª—è —á–∞—Ç–∞"""
    try:
        data = request.json
        if not data:
            return jsonify({'response': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! üòï'})
        user_message = data.get('message', '')
        
        if not user_message.strip():
            return jsonify({'response': '–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòä'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ–±—É—á–µ–Ω–∏—è
        if user_message.lower().strip().startswith('–Ω–∞—É—á–∏—Ç—å:'):
            try:
                content = user_message.split(':', 1)[1].strip()
                if ' - ' in content:
                    topic, info = content.split(' - ', 1)
                    topic = topic.strip()
                    info = info.strip()
                    response = bot.add_knowledge(topic, info)
                else:
                    response = "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –Ω–∞—É—á–∏—Ç—å: —Ç–µ–º–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìö"
            except:
                response = "–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –æ–±—É—á–µ–Ω–∏—è. –§–æ—Ä–º–∞—Ç: –Ω–∞—É—á–∏—Ç—å: —Ç–µ–º–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìö"
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = bot.generate_smart_response(user_message)
        
        return jsonify({'response': response})
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        return jsonify({'response': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. ü§ñ'})

if __name__ == '__main__':
    print("üöÄ FutureChat Advanced - –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ —Å–∞–º–∞—è –º–æ—â–Ω–∞—è –≤–µ—Ä—Å–∏—è!")
    print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    print(f"ü§ñ ChatterBot —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if bot.chatbot_available else '‚ùå –û—à–∏–±–∫–∞'}")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:5000")
    print("üî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ")
    print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏ Ctrl+C")
    print()
    
    app.run(host='0.0.0.0', port=5000, debug=False)