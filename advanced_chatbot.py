#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FutureChat Advanced - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –ß–∞—Ç-–±–æ—Ç —Å ChatterBot
–°–æ–∑–¥–∞–Ω–æ –ø–æ –æ–±—Ä–∞–∑—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ Awesome-Tech –Ω–∞ Replit

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É ChatterBot –¥–ª—è –±–æ–ª–µ–µ —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import os
import sys
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer, ListTrainer

class AdvancedFutureChat:
    def __init__(self):
        self.bot_name = "FutureChat Advanced"
        self.version = "2.0"
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç-–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        try:
            self.chatbot = ChatBot(
                'FutureChat',
                storage_adapter='chatterbot.storage.SQLStorageAdapter',
                database_uri='sqlite:///futurebot_database.sqlite3',
                logic_adapters=[
                    {
                        'import_path': 'chatterbot.logic.BestMatch',
                        'default_response': '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É?',
                        'maximum_similarity_threshold': 0.90
                    },
                    'chatterbot.logic.TimeLogicAdapter',
                    'chatterbot.logic.MathematicalEvaluationAdapter'
                ]
            )
            
            self.setup_training()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
            print("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º...")
            self.chatbot = None
    
    def setup_training(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä—ã
            corpus_trainer = ChatterBotCorpusTrainer(self.chatbot)
            list_trainer = ListTrainer(self.chatbot)
            
            # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∫–æ—Ä–ø—É—Å–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                print("üéì –û–±—É—á–∞—é –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
                corpus_trainer.train("chatterbot.corpus.english.greetings")
                corpus_trainer.train("chatterbot.corpus.english.conversations")
            except Exception as e:
                print(f"–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–æ—Ä–ø—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            print("üéì –û–±—É—á–∞—é –±–æ—Ç–∞ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É...")
            russian_conversations = [
                "–ü—Ä–∏–≤–µ—Ç",
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "–ö–∞–∫ –¥–µ–ª–∞?",
                "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ! –ê —É —Ç–µ–±—è?",
                "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                "–ú–µ–Ω—è –∑–æ–≤—É—Ç FutureChat. –Ø —É–º–Ω—ã–π AI –±–æ—Ç.",
                "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
                "–Ø –º–æ–≥—É –±–æ–ª—Ç–∞—Ç—å, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —É—á–∏—Ç—å—Å—è –Ω–æ–≤–æ–º—É!",
                "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
                "–ó–Ω–∞–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ AI —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ? –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
                "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
                "–Ø –Ω–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –æ –ø–æ–≥–æ–¥–µ, –Ω–æ –º–æ–≥—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —ç—Ç—É —Ç–µ–º—É.",
                "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?",
                "2+2 —Ä–∞–≤–Ω–æ 4",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
                "–ò–ò - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—à–∏–Ω–∞–º –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.",
                "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç",
                "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç–µ–º–Ω—ã–µ —Ç–µ–º—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–∞–≥–∏!",
                "–°–ø–∞—Å–∏–±–æ",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!",
                "–ü–æ–∫–∞",
                "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å!",
                "–¢—ã —É–º–Ω—ã–π?",
                "–Ø —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ —É—á—É—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
                "–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ Python?",
                "Python - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! –ü—Ä–æ—Å—Ç–æ–π –∏ –º–æ—â–Ω—ã–π.",
                "–ü–æ–º–æ–≥–∏ –º–Ω–µ",
                "–ö–æ–Ω–µ—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏, —Å —á–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.",
                "–¢—ã —Ä–æ–±–æ—Ç?",
                "–î–∞, —è AI —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ª—é–¥—å–º–∏.",
                "–ö–∞–∫–æ–π —Å–µ–π—á–∞—Å –≥–æ–¥?",
                "–Ø –∑–Ω–∞—é, —á—Ç–æ —Å–µ–π—á–∞—Å 2024-2025 –≥–æ–¥, –Ω–æ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É —É–∑–Ω–∞—Ç—å –Ω–µ –º–æ–≥—É."
            ]
            
            # –û–±—É—á–µ–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º
            for i in range(0, len(russian_conversations), 2):
                if i + 1 < len(russian_conversations):
                    list_trainer.train([
                        russian_conversations[i],
                        russian_conversations[i + 1]
                    ])
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
    
    def get_response(self, user_input):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞"""
        if self.chatbot is None:
            return "–ò–∑–≤–∏–Ω–∏, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é."
        
        try:
            response = self.chatbot.get_response(user_input)
            confidence = response.confidence
            
            # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
            if confidence < 0.5:
                alternative_responses = [
                    f"–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é... –í–æ–∑–º–æ–∂–Ω–æ: {response}",
                    f"–ú–æ–∂–µ—Ç –±—ã—Ç—å: {response}. –≠—Ç–æ —Ç–æ, —á—Ç–æ —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É?",
                    "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å?",
                    "–Ø –µ—â–µ —É—á—É—Å—å –ø–æ–Ω–∏–º–∞—Ç—å —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É."
                ]
                import random
                return random.choice(alternative_responses)
            
            return str(response)
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"
    
    def handle_special_commands(self, user_input):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        normalized = user_input.lower().strip()
        
        if normalized in ['–≤—ã—Ö–æ–¥', '–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'quit', 'exit']:
            return "goodbye"
        elif normalized in ['–ø–æ–º–æ—â—å', 'help']:
            return self.show_help()
        elif normalized in ['–∏–Ω—Ñ–æ', 'info', '–≤–µ—Ä—Å–∏—è']:
            return self.show_info()
        elif normalized.startswith('–æ–±—É—á–∏—Ç—å:'):
            return self.handle_training(user_input)
        
        return None
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = f"""
ü§ñ {self.bot_name} v{self.version} - –°–ø—Ä–∞–≤–∫–∞:

üìö –æ–±—É—á–∏—Ç—å: [–≤–æ–ø—Ä–æ—Å] - [–æ—Ç–≤–µ—Ç] - –Ω–∞—É—á–∏—Ç—å –Ω–æ–≤–æ–º—É –¥–∏–∞–ª–æ–≥—É
‚ÑπÔ∏è  –∏–Ω—Ñ–æ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ  
‚ùì –ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
üö™ –≤—ã—Ö–æ–¥ - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChatterBot –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –ú–æ–∂–µ—Ç —Ä–µ—à–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç –≤—Ä–µ–º—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
‚Ä¢ –£—á–∏—Ç—Å—è –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ –æ–±—É—á–∏—Ç—å: –ö–∞–∫ –ø–æ–≥–æ–¥–∞? - –°–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–æ –∏ —Ç–µ–ø–ª–æ!
‚Ä¢ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15 + 27?
‚Ä¢ What time is it?
        """
        return help_text.strip()
    
    def show_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        info_text = f"""
ü§ñ {self.bot_name} v{self.version}

üß† –î–≤–∏–∂–æ–∫: ChatterBot Library
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite
üåç –Ø–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π + English
üéØ –ê–ª–≥–æ—Ä–∏—Ç–º—ã: BestMatch, Time, Math
üìö –û–±—É—á–µ–Ω–∏–µ: –ö–æ—Ä–ø—É—Å + –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–°—Ç–∞—Ç—É—Å: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.chatbot else "‚ùå –û—à–∏–±–∫–∞"}
        """
        return info_text.strip()
    
    def handle_training(self, user_input):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è"""
        if self.chatbot is None:
            return "–û–±—É—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
        
        try:
            content = user_input.split(':', 1)[1].strip()
            if ' - ' in content:
                question, answer = content.split(' - ', 1)
                question = question.strip()
                answer = answer.strip()
                
                # –û–±—É—á–∞–µ–º –±–æ—Ç–∞ –Ω–æ–≤–æ–º—É –¥–∏–∞–ª–æ–≥—É
                trainer = ListTrainer(self.chatbot)
                trainer.train([question, answer])
                
                return f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ '{question}' –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å: '{answer}'"
            else:
                return "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—É—á–∏—Ç—å: –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—Ç"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}"
    
    def chat(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á–∞—Ç–∞"""
        print(f"ü§ñ {self.bot_name} v{self.version} –∑–∞–ø—É—â–µ–Ω!")
        print("–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –±–æ—Ç —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º.")
        print("–í–≤–µ–¥–∏ '–ø–æ–º–æ—â—å' –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è!")
        print("–î–ª—è –≤—ã—Ö–æ–¥–∞: '–≤—ã—Ö–æ–¥' –∏–ª–∏ '–ø–æ–∫–∞'\n")
        
        if self.chatbot is None:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: ChatterBot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.\n")
        
        while True:
            try:
                user_input = input("–¢—ã: ").strip()
                
                if not user_input:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                special_response = self.handle_special_commands(user_input)
                
                if special_response == "goodbye":
                    print("ü§ñ –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–¥–µ—é—Å—å, –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –±—ã–ª –ø–æ–ª–µ–∑–Ω—ã–º!")
                    break
                elif special_response:
                    print(f"ü§ñ {special_response}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
                response = self.get_response(user_input)
                print(f"ü§ñ {response}")
                
            except KeyboardInterrupt:
                print("\nü§ñ –ü–æ–∫–∞! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!")
                break
            except Exception as e:
                print(f"ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AdvancedFutureChat()
    bot.chat()

if __name__ == "__main__":
    main()