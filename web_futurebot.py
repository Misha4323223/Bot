#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
FutureChat Web - –í–µ–±-–≤–µ—Ä—Å–∏—è AI –ß–∞—Ç-–±–æ—Ç–∞
–°–æ–∑–¥–∞–Ω–æ –ø–æ –æ–±—Ä–∞–∑—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ Awesome-Tech –Ω–∞ Replit

–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è FutureChat —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
"""

from flask import Flask, render_template_string, request, jsonify
import json
import os
import random
import re
from datetime import datetime

app = Flask(__name__)

class WebFutureChat:
    def __init__(self):
        self.name = "FutureChat Web"
        self.version = "3.0"
        self.knowledge_base = {}
        self.conversation_history = []
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        self.load_knowledge_base()
        self.init_default_knowledge()
    
    def init_default_knowledge(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π"""
        default_knowledge = {
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ|–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å|hi|hello": [
                "–ü—Ä–∏–≤–µ—Ç! –Ø FutureChat Web, —É–º–Ω—ã–π AI –±–æ—Ç! ü§ñ",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FutureChat! ‚ú®",
                "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É! üöÄ",
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! üí¨"
            ],
            # –ü—Ä–æ—â–∞–Ω–∏—è
            "–ø—Ä–æ—â–∞–Ω–∏–µ|–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|bye|goodbye": [
                "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –∑–¥–æ—Ä–æ–≤–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üëã",
                "–ü–æ–∫–∞! –ó–∞—Ö–æ–¥–∏ –µ—â–µ - –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üòä",
                "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåü",
                "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! –£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üéâ"
            ],
            # –ò–º—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç|—Ç–≤–æ–µ –∏–º—è|–∫—Ç–æ —Ç—ã|–ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è|–∏–º—è": [
                "–ú–µ–Ω—è –∑–æ–≤—É—Ç FutureChat Web! –Ø –≤–µ–±-–≤–µ—Ä—Å–∏—è —É–º–Ω–æ–≥–æ AI –±–æ—Ç–∞ üåê",
                "FutureChat Web - —ç—Ç–æ —è! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòÑ",
                "–Ø FutureChat, —É–º–Ω—ã–π AI —á–∞—Ç-–±–æ—Ç! –ö—Ä—É—Ç–æ, –¥–∞? üíª"
            ],
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å|—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏|—Ñ—É–Ω–∫—Ü–∏–∏|—á—Ç–æ –º–æ–∂–µ—à—å": [
                "–Ø –º–æ–≥—É –±–æ–ª—Ç–∞—Ç—å, —É—á–∏—Ç—å—Å—è –Ω–æ–≤–æ–º—É –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –≤–µ–±! üåç",
                "–£–º–µ—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üß†",
                "–ú–æ–≥—É –æ–±—â–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω, —É—á–∏—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å 24/7! ‚ö°"
            ],
            # –ö–∞–∫ –¥–µ–ª–∞
            "–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å|–∫–∞–∫ –∂–∏–∑–Ω—å|–∫–∞–∫ —Ç—ã": [
                "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é –≤ —Å–µ—Ç–∏ –∏ —Ä–∞–¥—É—é—Å—å –∂–∏–∑–Ω–∏! üòé",
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í–µ–±-—Ñ–æ—Ä–º–∞—Ç –¥–∞–µ—Ç –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! üöÄ",
                "–í—Å–µ —Å—É–ø–µ—Ä! –ê –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞? ü§ó"
            ],
            # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "—Ö–æ—Ä–æ—à–æ|–æ—Ç–ª–∏—á–Ω–æ|—Å—É–ø–µ—Ä|–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ|–∑–¥–æ—Ä–æ–≤–æ|–∫—Ä—É—Ç–æ|–ø–ª—é—Å|–Ω–æ—Ä–º–∞–ª—å–Ω–æ|–Ω–µ–ø–ª–æ—Ö–æ": [
                "–í–æ—Ç —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! –†–∞–¥ —Å–ª—ã—à–∞—Ç—å! üòä",
                "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π - —ç—Ç–æ –≤–∞–∂–Ω–æ! üåü",
                "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ! üòÑ",
                "–°—É–ø–µ—Ä! –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? üöÄ"
            ],
            # –í—Ä–µ–º—è
            "–≤—Ä–µ–º—è|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏|–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å": [
                f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}! ‚è∞",
                f"–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')} üïê",
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')} üìÖ"
            ],
            # –î–∞—Ç–∞
            "–¥–∞—Ç–∞|–∫–∞–∫–æ–µ —á–∏—Å–ª–æ|—Å–µ–≥–æ–¥–Ω—è": [
                f"–°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')} üìÖ",
                f"–î–∞—Ç–∞: {datetime.now().strftime('%d %B %Y')} üóìÔ∏è"
            ],
            # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            "—Å–ø–∞—Å–∏–±–æ|thanks|–±–ª–∞–≥–æ–¥–∞—Ä—é": [
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üòä",
                "–ù–µ –∑–∞ —á—Ç–æ! –û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ! ü§ó",
                "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üåü"
            ],
            # –í–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ
            "—Ç—ã —Ä–æ–±–æ—Ç|—Ç—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|—Ç—ã ai|—Ç—ã –±–æ—Ç": [
                "–î–∞, —è AI —á–∞—Ç-–±–æ—Ç! –ù–æ –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π! ü§ñ",
                "–¢–æ—á–Ω–æ! –Ø –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ–±—â–µ–Ω–∏—è! üß†",
                "–î–∞, —è –±–æ—Ç, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º! ‚ú®"
            ],
            # –ü–æ–º–æ—â—å
            "–ø–æ–º–æ—â—å|help|–∫–æ–º–∞–Ω–¥—ã": [
                "–ü–æ–º–æ–≥—É —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º! –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É '–Ω–∞—É—á–∏—Ç—å: —Ç–µ–º–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' üìö",
                "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –û–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º! ü§ó",
                "–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üí°"
            ]
        }
        
        for topic, responses in default_knowledge.items():
            if topic not in self.knowledge_base:
                self.knowledge_base[topic] = responses
    
    def load_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            if os.path.exists('web_futurebot_knowledge.json'):
                with open('web_futurebot_knowledge.json', 'r', encoding='utf-8') as f:
                    self.knowledge_base = json.load(f)
            else:
                self.knowledge_base = {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.knowledge_base = {}
    
    def save_knowledge_base(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            with open('web_futurebot_knowledge.json', 'w', encoding='utf-8') as f:
                json.dump(self.knowledge_base, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def normalize_text(self, text):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
        text = re.sub(r'[^\w\s]', '', text.lower())
        return text.strip()
    
    def find_best_match(self, user_input):
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        normalized_input = self.normalize_text(user_input)
        best_match = None
        highest_score = 0
        
        for topic_pattern, responses in self.knowledge_base.items():
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            topic_variants = [variant.strip() for variant in topic_pattern.split('|')]
            
            for variant in topic_variants:
                score = 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if variant.lower() == normalized_input:
                    score = 1.0
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                elif variant.lower() in normalized_input:
                    score = 0.9
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –≤ –≤–∞—Ä–∏–∞–Ω—Ç (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑)
                elif normalized_input in variant.lower() and len(normalized_input) > 3:
                    score = 0.8
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                else:
                    variant_words = set(variant.lower().split())
                    input_words = set(normalized_input.split())
                    
                    # –°—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤
                    common_words = variant_words.intersection(input_words)
                    if common_words and variant_words:
                        score = len(common_words) / len(variant_words)
                        
                        # –ë–æ–Ω—É—Å –∑–∞ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞
                        important_words = {'–∫–∞–∫', '—á—Ç–æ', '–∫—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∑–∞—á–µ–º', '–ø–æ—á–µ–º—É'}
                        if common_words.intersection(important_words):
                            score += 0.2
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if score > highest_score:
                    highest_score = score
                    best_match = topic_pattern
        
        return best_match, highest_score
    
    def generate_response(self, user_input):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö
        self.update_time_responses()
        
        topic, confidence = self.find_best_match(user_input)
        
        # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –¥–∞–µ–º –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç
        if topic and confidence >= 0.8:
            responses = self.knowledge_base[topic]
            return random.choice(responses)
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–æ–º–Ω–µ–Ω–∏–µ–º
        elif topic and confidence >= 0.5:
            responses = self.knowledge_base[topic]
            response = random.choice(responses)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            uncertain_prefixes = [
                "",  # –ß–∞—â–µ –¥–∞–µ–º –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç
                "",
                "–ö–∞–∂–µ—Ç—Å—è, ",
                "–í–æ–∑–º–æ–∂–Ω–æ, "
            ]
            prefix = random.choice(uncertain_prefixes)
            return prefix + response
        
        # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –ø—Ä–æ—Å–∏–º –æ–±—ä—è—Å–Ω–∏—Ç—å
        else:
            unknown_responses = [
                f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –±–æ–ª—å—à–µ –ø—Ä–æ '{user_input}' ü§ì",
                f"–ü—Ä–æ '{user_input}' —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é. –ù–∞—É—á–∏ –º–µ–Ω—è! üìñ",
                f"'{user_input}' - –Ω–æ–≤–∞—è —Ç–µ–º–∞! –ß—Ç–æ –æ–± —ç—Ç–æ–º –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å? üßê",
                "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é... –ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É? ü§î",
                "–≠—Ç–æ —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ! –ü–æ–¥–µ–ª–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π! ‚ú®"
            ]
            return random.choice(unknown_responses)
    
    def update_time_responses(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        time_topics = [
            "–≤—Ä–µ–º—è|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏|–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å",
            "–¥–∞—Ç–∞|–∫–∞–∫–æ–µ —á–∏—Å–ª–æ|—Å–µ–≥–æ–¥–Ω—è"
        ]
        
        for topic in time_topics:
            if topic in self.knowledge_base:
                if "–≤—Ä–µ–º—è" in topic:
                    self.knowledge_base[topic] = [
                        f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M')}! ‚è∞",
                        f"–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')} üïê",
                        f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')} üìÖ"
                    ]
                elif "–¥–∞—Ç–∞" in topic:
                    self.knowledge_base[topic] = [
                        f"–°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')} üìÖ",
                        f"–î–∞—Ç–∞: {datetime.now().strftime('%d %B %Y')} üóìÔ∏è"
                    ]
    
    def add_knowledge(self, topic, info):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π
        topic_key = topic.lower()
        
        if topic_key not in self.knowledge_base:
            self.knowledge_base[topic_key] = []
        
        self.knowledge_base[topic_key].append(info)
        self.save_knowledge_base()
        
        thanks_responses = [
            f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –ø—Ä–æ {topic}! üéâ",
            f"–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–æ–º–Ω–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ {topic}! üß†",
            f"–ó–¥–æ—Ä–æ–≤–æ! –Ø —Å—Ç–∞–ª —É–º–Ω–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ! ‚ú®",
            f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ {topic} —è –∑–Ω–∞—é –±–æ–ª—å—à–µ! üìö"
        ]
        return random.choice(thanks_responses)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = WebFutureChat()

# HTML —à–∞–±–ª–æ–Ω
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ FutureChat Web - AI –ß–∞—Ç-–±–æ—Ç</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .chat-container {
            width: 90%;
            max-width: 800px;
            height: 90vh;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .chat-header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
        }
        
        .message {
            margin-bottom: 15px;
            display: flex;
            align-items: flex-start;
        }
        
        .message.user {
            justify-content: flex-end;
        }
        
        .message-content {
            max-width: 70%;
            padding: 12px 18px;
            border-radius: 18px;
            font-size: 16px;
            line-height: 1.4;
        }
        
        .message.user .message-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-bottom-right-radius: 6px;
        }
        
        .message.bot .message-content {
            background: white;
            color: #333;
            border: 1px solid #e9ecef;
            border-bottom-left-radius: 6px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin: 0 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            font-weight: bold;
        }
        
        .message.user .message-avatar {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            color: white;
        }
        
        .message.bot .message-avatar {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
        }
        
        .chat-input {
            padding: 20px;
            background: white;
            border-top: 1px solid #e9ecef;
        }
        
        .input-container {
            display: flex;
            gap: 10px;
        }
        
        #messageInput {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s ease;
        }
        
        #messageInput:focus {
            border-color: #667eea;
        }
        
        #sendButton {
            padding: 15px 25px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        
        #sendButton:hover {
            transform: translateY(-2px);
        }
        
        #sendButton:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .typing-indicator {
            display: none;
            padding: 10px 0;
            font-style: italic;
            color: #666;
        }
        
        .commands-hint {
            padding: 15px;
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            margin-bottom: 20px;
            border-radius: 0 8px 8px 0;
            font-size: 14px;
        }
        
        .commands-hint strong {
            color: #1976d2;
        }
        
        @media (max-width: 600px) {
            .chat-container {
                width: 95%;
                height: 95vh;
                border-radius: 15px;
            }
            
            .message-content {
                max-width: 85%;
                font-size: 14px;
            }
            
            .chat-header {
                font-size: 20px;
                padding: 15px;
            }
        }
        
        .scroll-to-bottom {
            scroll-behavior: smooth;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            ü§ñ FutureChat Web v3.0
            <div style="font-size: 14px; margin-top: 5px; opacity: 0.9;">
                –£–º–Ω—ã–π AI –±–æ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π!
            </div>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="commands-hint">
                <strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:</strong><br>
                ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è - —è –æ—Ç–≤–µ—á—É –∏–ª–∏ –ø–æ–ø—Ä–æ—à—É –Ω–∞—É—á–∏—Ç—å –º–µ–Ω—è!<br>
                ‚Ä¢ <strong>–Ω–∞—É—á–∏—Ç—å: —Ç–µ–º–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</strong> - –Ω–∞—É—á–∏ –º–µ–Ω—è –Ω–æ–≤–æ–º—É<br>
                ‚Ä¢ <strong>–≤—Ä–µ–º—è</strong> –∏–ª–∏ <strong>–¥–∞—Ç–∞</strong> - —É–∑–Ω–∞–π —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è<br>
                ‚Ä¢ –Ø —É—á—É—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ! üß†
            </div>
            
            <div class="message bot">
                <div class="message-avatar">ü§ñ</div>
                <div class="message-content">
                    –ü—Ä–∏–≤–µ—Ç! –Ø FutureChat Web - —É–º–Ω—ã–π AI –±–æ—Ç! üöÄ<br>
                    –Ø –º–æ–≥—É –±–æ–ª—Ç–∞—Ç—å, —É—á–∏—Ç—å—Å—è –Ω–æ–≤–æ–º—É –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.<br>
                    –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ –¥–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è! üòä
                </div>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            ü§ñ FutureChat –ø–µ—á–∞—Ç–∞–µ—Ç...
        </div>
        
        <div class="chat-input">
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                       onkeypress="handleKeyPress(event)">
                <button id="sendButton" onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>
    </div>

    <script>
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const typingIndicator = document.getElementById('typingIndicator');

        function addMessage(content, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = isUser ? 'üë§' : 'ü§ñ';
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            messageContent.innerHTML = content.replace(/\\n/g, '<br>');
            
            if (isUser) {
                messageDiv.appendChild(messageContent);
                messageDiv.appendChild(avatar);
            } else {
                messageDiv.appendChild(avatar);
                messageDiv.appendChild(messageContent);
            }
            
            chatMessages.appendChild(messageDiv);
            scrollToBottom();
        }

        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function showTyping() {
            typingIndicator.style.display = 'block';
            scrollToBottom();
        }

        function hideTyping() {
            typingIndicator.style.display = 'none';
        }

        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            addMessage(message, true);
            messageInput.value = '';
            sendButton.disabled = true;
            showTyping();

            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message })
                });

                const data = await response.json();
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                setTimeout(() => {
                    hideTyping();
                    addMessage(data.response);
                    sendButton.disabled = false;
                    messageInput.focus();
                }, 500 + Math.random() * 1000);

            } catch (error) {
                hideTyping();
                addMessage('–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... üòî');
                sendButton.disabled = false;
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        messageInput.focus();
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/chat', methods=['POST'])
def chat():
    """API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        data = request.get_json()
        user_message = data.get('message', '').strip()
        
        if not user_message:
            return jsonify({'response': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòä'})
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è
        if user_message.lower().startswith('–Ω–∞—É—á–∏—Ç—å:'):
            try:
                content = user_message.split(':', 1)[1].strip()
                if ' - ' in content:
                    topic, info = content.split(' - ', 1)
                    topic = topic.strip()
                    info = info.strip()
                    response = bot.add_knowledge(topic, info)
                else:
                    response = "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –Ω–∞—É—á–∏—Ç—å: —Ç–µ–º–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìù"
            except:
                response = "–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ. –§–æ—Ä–º–∞—Ç: –Ω–∞—É—á–∏—Ç—å: —Ç–µ–º–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ùå"
        else:
            # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = bot.generate_response(user_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        bot.conversation_history.append({
            'user': user_message,
            'bot': response,
            'timestamp': datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(bot.conversation_history) > 100:
            bot.conversation_history = bot.conversation_history[-100:]
        
        return jsonify({'response': response})
        
    except Exception as e:
        return jsonify({'response': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} üòî'})

@app.route('/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    return jsonify({
        'name': bot.name,
        'version': bot.version,
        'knowledge_topics': len(bot.knowledge_base),
        'conversation_count': len(bot.conversation_history),
        'total_responses': sum(len(responses) for responses in bot.knowledge_base.values())
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ FutureChat Web...")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:5000")
    print("ü§ñ FutureChat –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    app.run(host='0.0.0.0', port=5000, debug=False)